#+STARTUP: showall
#+OPTIONS: toc:2
#+INFOJS_OPT: view:info toc:tdepth:2

**** Author: Rob Alicea
**** Date: <2024-06-23>
**** Description: A collection of all my configuration files to ensure I never lose my setup and can easily recreate it on any Linux build. This repository is organized in Org-mode, a powerful tool I've recently discovered thanks to DT's YouTube channel and others in the community.

* Table of Contents
  - [[#why-dotfiles][Why Dotfiles?]]
  - [[#why-org-mode-and-doom-emacs][Why Org-mode and Doom Emacs?]]
  - [[#setting-up][Setting Up]]
  - [[#updating-your-configuration][Updating Your Configuration]]
  - [[#using-git-bare-for-dotfiles][Using Git Bare for Dotfiles]]
  - [[#why-i-love-this-setup][Why I Love This Setup]]
  - [[#join-the-journey][Join the Journey!]]

*  Welcome to My Dotfiles  frRepository
  Hey there! ðŸ‘‹ Welcome to my Dotfiles repository, a collection of all my configuration files to ensure I never lose my setup and can easily recreate it on any Linux build. This repository is organized in Org-mode, a powerful tool I've recently discovered thanks to DT's YouTube channel and others in the community.

* Why Dotfiles?
Dotfiles are configuration files for various applications and tools that make up your personal computing environment. By storing these files in a Git repository, you can:
- *Backup and Restore:* Easily recover your setup if you lose your files or switch to a new system.
- *Version Control:* Track changes to your configurations and roll back if something breaks.
- *Share and Learn:* Share your setup with others and learn from their configurations.

* Why Org-mode and Doom Emacs?
Org-mode and Doom Emacs have revolutionized how I manage my configuration files and daily workflow. Here's why:
- *Literate Programming:* Org-mode allows me to combine documentation and code in a single file, making my configurations more understandable and maintainable.
- *Doom Emacs:* This Emacs distribution provides a modern, fast, and highly customizable environment that enhances my productivity and workflow.

* Setting Up
To get started with my Dotfiles, follow these steps:

** 1. Clone the Repository
   Clone this repository to your home directory:

   #+BEGIN_SRC sh
   git clone --bare git@github.com:yourusername/Dotfiles.git $HOME/.cfg
   alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'
   config checkout
   config config --local status.showUntrackedFiles no
   #+END_SRC

** 2. Install Doom Emacs
   Follow the installation instructions on the Doom Emacs [[https://github.com/hlissner/doom-emacs][GitHub page]] to set up Doom Emacs.

** 3. Tangle Org Files
   Open the Org files in this repository and tangle them to generate the necessary configuration files:

   #+BEGIN_SRC emacs-lisp
   SPC m b t
   #+END_SRC

* Updating Your Configuration
To update your configuration files, follow these steps:

** 1. Edit Your Org Files
   Make changes to your Org files to update your configurations. Hereâ€™s an example:

   #+BEGIN_SRC org
   * Custom Keybindings
   #+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
   ;; Custom keybindings
   (global-set-key (kbd "C-x C-b") 'ibuffer)
   #+END_SRC


** 2. Tangle the Org Files
   Tangle the Org files to generate the updated configuration files:

   #+BEGIN_SRC emacs-lisp
   SPC m b t
   #+END_SRC

** 3. Stage and Commit Changes
   Use the `config` alias to add, commit, and push your changes:

   #+BEGIN_SRC sh
   config add ~/.doom.d/config.el
   config commit -m "Updated keybindings in config.el"
   config push
   #+END_SRC

* Using Git Bare for Dotfiles
Using a Git bare repository for Dotfiles keeps your home directory clean and simplifies version control. Here's how I manage it:

- *Add and Commit Changes:*
  Use the `config` alias to add and commit changes to your Dotfiles:

  #+BEGIN_SRC sh
  config add ~/.bashrc
  config commit -m "Update bashrc"
  config push
  #+END_SRC

- *Exclude Untracked Files:*
  Avoid cluttering your Git status with untracked files by configuring Git to ignore them:

  #+BEGIN_SRC sh
  config config --local status.showUntrackedFiles no
  #+END_SRC

* Why I Love This Setup
After experimenting with various setups, I've found that combining Org-mode, Doom Emacs, and a Git bare repository provides the perfect balance of flexibility and simplicity. Here's what I love about it:
- *Documentation and Code Together:* Org-mode lets me document my configurations alongside the actual code, making it easier to understand and maintain.
- *Efficient Workflow:* Doom Emacs streamlines my workflow with its powerful features and customizability.
- *Peace of Mind:* Knowing that all my configurations are safely version-controlled and easily recoverable gives me peace of mind.

* Join the Journey!
If you're new to Linux or just looking to streamline your configuration management, I encourage you to give this setup a try. Feel free to explore my Dotfiles, borrow ideas, and reach out with any questions. Let's make our computing environments as efficient and enjoyable as possible!

Happy hacking! ðŸš€

Rob Alicea
