#+STARTUP: showall
#+OPTIONS: toc:2
#+INFOJS_OPT: view:info toc:tdepth:2
#+BEGIN_HTML
<p><strong>Estimated Reading Time:</strong> 10 minutes</p>
#+END_HTML

* Internet Monitoring Suite
*Author:* Rob Alicea
*Date:* <2024-06-23>
*Description:* This document describes how to set up and use the Internet Monitoring Suite to continuously monitor your internet connection and log results for better communication with your ISP.

** Table of Contents
- [[#introduction][Introduction]]
- [[#requirements][Requirements]]
- [[#setup][Setup]]
  - [[#download-the-script][Download the Script]]
  - [[#make-the-script-executable][Make the Script Executable]]
  - [[#create-systemd-service][Create systemd Service]]
- [[#usage][Usage]]
  - [[#start-the-service][Start the Service]]
  - [[#check-service-status][Check Service Status]]
  - [[#view-logs][View Logs]]
- [[#customization][Customization]]
  - [[#change-log-directory][Change Log Directory]]
  - [[#update-check-intervals][Update Check Intervals]]
- [[#uninstallation][Uninstallation]]
  - [[#stop-the-service][Stop the Service]]
  - [[#disable-the-service][Disable the Service]]
  - [[#remove-the-script-and-service][Remove the Script and Service]]

* Introduction
The Internet Monitoring Suite is a script that monitors your internet connection continuously and logs the results. It performs periodic internet speed tests, latency checks, and monitors connection dropouts and service outages. The results are consolidated into a master log and converted to a PDF for easy sharing with your ISP.

* Requirements
- Fedora 40 or compatible Linux distribution
- `speedtest-cli`
- `pandoc`
- `systemd`

* Setup
** Download the Script
Download the internet monitoring script and save it as ~internet_monitoring.sh~ in the following directory: ~/home/rob/Dotfiles/monitoring-suite~.

#+BEGIN_SRC sh :tangle /home/rob/Dotfiles/monitoring-suite/internet_monitoring.sh
#!/bin/bash

# Define PID file and log directory
PIDFILE="/tmp/internet_monitoring.pid"
BASE_LOG_DIR="$HOME/internet_monitoring_logs"

# Function to start monitoring
start_monitoring() {
    # Ensure the base log directory exists
    mkdir -p $BASE_LOG_DIR

    # Create a new directory for this test run
    LOG_DIR="$BASE_LOG_DIR/$(date +"%Y-%m-%d_%H-%M-%S")"
    mkdir -p $LOG_DIR

    # Check if another instance is running, if so, stop it
    if [ -e $PIDFILE ] && kill -0 $(cat $PIDFILE); then
        echo "Stopping existing instance..."
        kill -9 $(cat $PIDFILE)
        rm -f $PIDFILE
    fi

    # Write the current PID to the PID file
    echo $$ > $PIDFILE

    # Trap to ensure the PID file is removed on script exit
    trap "rm -f $PIDFILE" EXIT

    echo "Starting monitoring suite..."
    while true; do
        run_internet_speed_test
        run_latency_check
        create_master_log
        convert_to_pdf
        sleep 1800  # Wait for 30 minutes before the next run
    done
}

# Function to run internet speed test with timeout
run_internet_speed_test() {
    LOG_FILE="$LOG_DIR/internet_speed_log.txt"
    echo "Running internet speed test..."
    timeout 30s speedtest-cli --simple >> $LOG_FILE 2>&1 || echo "Speedtest failed or timed out" >> $LOG_FILE
    echo "Internet speed test completed and logged."
}

# Function to run latency check with timeout
run_latency_check() {
    LOG_FILE="$LOG_DIR/internet_latency_log.txt"
    TARGET="8.8.8.8"
    echo "Running latency check..."
    timeout 30s ping -c 10 $TARGET >> $LOG_FILE 2>&1 || echo "Ping failed or timed out" >> $LOG_FILE
    echo "Latency check completed and logged."
}

# Function to monitor connection dropouts
run_connection_dropouts() {
    LOG_FILE="$LOG_DIR/connection_dropouts_log.txt"
    TARGET="8.8.8.8"
    echo "Starting connection dropouts monitoring..."
    while true; do
        timeout 5s ping -c 1 $TARGET > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "Connection dropout detected at $(date +"%Y-%m-%d %H:%M:%S")" >> $LOG_FILE
        fi
        sleep 60  # Wait for 1 minute before the next check
    done
}

# Function to monitor service outages
run_service_outages() {
    LOG_FILE="$LOG_DIR/service_outages_log.txt"
    TARGET="8.8.8.8"
    echo "Starting service outages monitoring..."
    while true; do
        timeout 5s ping -c 1 $TARGET > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            START=$(date +"%Y-%m-%d %H:%M:%S")
            echo "Service outage started at $START" >> $LOG_FILE
            while [ $? -ne 0 ]; do
                timeout 5s ping -c 1 $TARGET > /dev/null 2>&1
                sleep 10
            done
            END=$(date +"%Y-%m-%d %H:%M:%S")
            echo "Service outage ended at $END" >> $LOG_FILE
            DURATION=$(( $(date -d "$END" +%s) - $(date -d "$START" +%s) ))
            echo "Outage duration: $DURATION seconds" >> $LOG_FILE
            echo "----------------------------------" >> $LOG_FILE
        fi
        sleep 60  # Wait for 1 minute before the next check
    done
}

# Function to create a master log
create_master_log() {
    MASTER_LOG="$LOG_DIR/master_log.txt"
    echo "Creating master log..."
    echo "Internet Monitoring Log - $(date)" > $MASTER_LOG
    echo "----------------------------------" >> $MASTER_LOG

    echo "Internet Speed Test Log" >> $MASTER_LOG
    cat "$LOG_DIR/internet_speed_log.txt" >> $MASTER_LOG
    echo "----------------------------------" >> $MASTER_LOG

    echo "Latency Test Log" >> $MASTER_LOG
    cat "$LOG_DIR/internet_latency_log.txt" >> $MASTER_LOG
    echo "----------------------------------" >> $MASTER_LOG

    echo "Connection Dropouts Log" >> $MASTER_LOG
    cat "$LOG_DIR/connection_dropouts_log.txt" >> $MASTER_LOG
    echo "----------------------------------" >> $MASTER_LOG

    echo "Service Outages Log" >> $MASTER_LOG
    cat "$LOG_DIR/service_outages_log.txt" >> $MASTER_LOG
    echo "----------------------------------" >> $MASTER_LOG

    echo "Master log created at $MASTER_LOG"
}

# Function to convert master log to PDF
convert_to_pdf() {
    MASTER_LOG="$LOG_DIR/master_log.txt"
    PDF_FILE="$LOG_DIR/master_log.pdf"
    echo "Converting master log to PDF..."
    if command -v pandoc &> /dev/null; then
        pandoc "$MASTER_LOG" -o "$PDF_FILE"
        echo "PDF created at $PDF_FILE"
    else
        echo "Pandoc is not installed. Install pandoc to convert the log to PDF."
    fi
}

# Start connection dropouts and service outages monitoring in background
run_connection_dropouts &
run_service_outages &

# Start monitoring suite
start_monitoring
#+END_SRC

** Make the Script Executable
Make the script executable by running the following command in the terminal:
#+BEGIN_SRC sh
chmod +x /home/rob/Dotfiles/monitoring-suite/internet_monitoring.sh
#+END_SRC

** Create systemd Service
Create a systemd service to manage the script and ensure it starts on reboot.

1. Create the systemd service file:
#+BEGIN_SRC sh
sudo nano /etc/systemd/system/internet_monitoring.service
#+END_SRC

2. Add the following content to the service file, replacing ~your_username~ with your actual username:
#+BEGIN_SRC ini
[Unit]
Description=Internet Monitoring Service
After=network.target

[Service]
ExecStart=/home/rob/Dotfiles/monitoring-suite/internet_monitoring.sh
WorkingDirectory=/home/rob/Dotfiles/monitoring-suite
StandardOutput=journal
StandardError=journal
Restart=always
User=rob
Group=rob

[Install]
WantedBy=multi-user.target
#+END_SRC

3. Enable and start the service:
#+BEGIN_SRC sh
sudo systemctl enable internet_monitoring.service
sudo systemctl start internet_monitoring.service
#+END_SRC

4. Check the status of the service:
#+BEGIN_SRC sh
sudo systemctl status internet_monitoring.service
#+END_SRC

* Usage
** Start the Service
If the service is not already running, you can start it with:
#+BEGIN_SRC sh
sudo systemctl start internet_monitoring.service
#+END_SRC

** Check Service Status
To check the status of the service, use:
#+BEGIN_SRC sh
sudo systemctl status internet_monitoring.service
#+END_SRC

** View Logs
Logs are stored in the ~/internet_monitoring_logs~ directory. Each run will create a new subdirectory with timestamped logs.

* Customization
** Change Log Directory
To change the log directory, modify the ~BASE_LOG_DIR~ variable in the script.

** Update Check Intervals
To update the check intervals, modify the ~sleep~ durations in the script. For example, to change the internet speed test and latency check intervals, modify the following line in the ~start_monitoring~ function:
#+BEGIN_SRC sh
sleep 1800  # Wait for 30 minutes before the next run
#+END_SRC

For connection dropouts and service outages checks, modify the ~sleep~ duration in the respective functions:
#+BEGIN_SRC sh
sleep 60  # Wait for 1 minute before the next check
#+END_SRC

* Uninstallation
** Stop the Service
To stop the service, use:
#+BEGIN_SRC sh
sudo systemctl stop internet_monitoring.service
#+END_SRC

** Disable the Service
To disable the service, use:
#+BEGIN_SRC sh
sudo systemctl disable internet_monitoring.service
#+END_SRC

** Remove the Script and Service
1. Remove the script file:
#+BEGIN_SRC sh
rm /home/rob/Dotfiles/monitoring-suite/internet_monitoring.sh
#+END_SRC

2. Remove the systemd service file:
#+BEGIN_SRC sh
sudo rm /etc/systemd/system/internet_monitoring.service
#+END_SRC

3. Reload systemd to apply changes:
#+BEGIN_SRC sh
sudo systemctl daemon-reload
#+END_SRC

By following these instructions, you can set up, customize, and manage the Internet Monitoring Suite on your Linux system. The script will continuously monitor your internet connection, log results, and provide a PDF summary for easy sharing with your ISP.
